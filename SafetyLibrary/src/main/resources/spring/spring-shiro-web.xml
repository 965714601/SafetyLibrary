<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <!--rememberMe 的功能未完成。第二次登录时，似乎没有成功自动登录。还需优化-->
    <bean id="userRealm" class="com.sptpc.realm.UserRealm">
        <!-- ===缓存配置。注入缓存参数=== -->
        <!-- 是否启用缓存 -->
        <property name="cachingEnabled" value="true"/>
        <!-- 是否启用身份验证缓存 -->
        <property name="authenticationCachingEnabled" value="true"/>
        <!-- 缓存AuthenticationInfo信息的缓存名称 -->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!-- 是否启用授权缓存，缓存AuthorizationInfo信息 -->
        <property name="authorizationCachingEnabled" value="true"/>
        <!-- 缓存AuthorizationInfo信息的缓存名称 -->
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- ===会话管理=== -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 设置全局会话过期时间：默认30分钟 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 是否启用sessionIdCookie，默认是启用的 -->
        <property name="sessionIdCookieEnabled" value="true"/>
        <!-- 会话Cookie -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!-- 设置session缓存的名称，默认就是shiro-activeSessionCache -->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!-- 会话ID生成器，用于生成会话的ID，使用JavaScript的UUID生成 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:other/ehcache.xml"/>
    </bean>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <!-- 如果设置为true，则客户端不会暴露给服务端脚本代码，有助于减少某些类型的跨站脚本攻击 -->
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/><!-- maxAge=-1表示浏览器关闭时失效此Cookie -->
    </bean>


    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <!-- 注入cacheManager -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 注入sessionManager -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <!-- 这两个字段，username和password要和表单中定义的username和password字段名称相同，可以更改，但是表单和XML要对应 -->
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/login.jsp"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--shiro整个的处理，都由securityManger指定和决定 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- loginUrl==>如果登录成功，跳转到哪个页面，或者执行哪个请求 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 验证通过执行的请求或者跳转 -->
        <property name="successUrl" value="/frame/frameSet.jsp"/>
        <!-- 验证不通过执行的请求或者跳转 -->
        <property name="unauthorizedUrl" value="/login.jsp"/>

        <property name="filters">
            <map>
                <!-- 自定义的表单验证。此 key 可以用于登录 remeberMe 的用户 -->
                <entry key="authc" value-ref="formAuthenticationFilter"/>

                <!-- 自定义的 roles。在配置多个权限时，将原先的「且」改为「或」-->
                <entry key="roles" value-ref="CustomRolesAuthorizationFilter"/>
            </map>
        </property>

        <!-- 具体的拦截路径和拦截的方式和角色和权限的范围 -->
        <property name="filterChainDefinitions">
            <value>
                #这里相当于ini配置文件中的[urls]
                #url=拦截器[参数]，拦截器
                # /techer/** = authc, perms[document:read]
                # 如果用户没有该角色，然后访问该 路径 会报 401错误

                # 配置静态资源可以匿名访问
                /css/** = anon
                /js/** = anon
                /img/** = anon
                /fonts/** = anon

                # 当访问login时，不用进行认证（anon表示匿名）
                /Userlogin/login = anon
                /Userlogin/identity = anon
                /logout = logout

                /bookClass/** = authc, roles["BookManager, SysManager"]

                /book/toBook = user, roles["BookManager, SysManager"]
                /book/findBookInfo = user
                /book/insertBook = authc, roles["BookManager, SysManager"]
                /book/deleteBook = authc, roles["BookManager, SysManager"]
                /book/editBook = authc, roles["BookManager, SysManager"]
                /book/updateBook = authc, roles["BookManager, SysManager"]

                /borrow/toBorrow = user, roles["BookManager, SysManager"]
                /borrow/insertBorrow = authc, roles["BookManager, SysManager"]
                /borrow/deleteBorrow = authc, roles["BookManager, SysManager"]
                /borrow/comeBorrowEdit = authc, roles["BookManager, SysManager"]

                /reader/** = authc, roles["Manager, SysManager"]

                /readerType/** = authc, roles["BookManager, SysManager"]

                /Userlogin/selectPermission = authc, roles["Manager, SysManager"]
                /Userlogin/toReaderPermission/** = authc, roles["Manager, SysManager"]

                <!--
                /admin/** = user, roles[admin]
                /techer/** = user, roles[teacher]
                /student/** = user, roles[student] -->

                # 除了上面额 /login 可以匿名访问，其他路径都需要登录访问
                # 如果没登录，就访问其他路径会跳转到 /login 登录
                # 除上述定义的链接外，只要用户登录就可以访问
                /** = user
            </value>
        </property>

    </bean>

    <!-- 使用Shio自带的退出操作。只要输入/loguot即可完成用户的退出和数据的清空 -->
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter"/>

    <bean id="CustomRolesAuthorizationFilter" class="com.sptpc.AuthorizationFilter.CustomRolesAuthorizationFilter"/>

</beans>
